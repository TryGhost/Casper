{{!< default}}

<style>
    /* Remove site footer and content */
    .site-footer,
    .content-title,
    .post-full-footer,
    .post-content {
        display: none !important;
    }
    /* Match map style to Ghost */
    #map {
        background-color: var(--color-darkmode);
        flex: 1 !important;
        height: calc(100vh - 88px) !important;/* Adjust header height if needed */
        width: 100% !important;
    }

    /* Leaflet tooltip styling */
    .leaflet-tooltip {
        background-color: rgba(21, 23, 26, 0.9) !important;
        color: #fff !important;
        font-family: var(--font-sans) !important;
        font-size: 2em !important;
        padding: 8px 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.5) !important;
        border-radius: 4px !important;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.4) !important;
        backdrop-filter: blur(8px) !important;
        -webkit-backdrop-filter: blur(8px) !important;
        width: 500px !important;
        white-space: normal !important;
    }
    .leaflet-tooltip b {
      text-transform: uppercase !important;
      font-weight: bolder !important;
      color: var(--ghost-accent-color) !important;
    }
    /* Tooltip arrow styling */
    .leaflet-tooltip-top:before,
    .leaflet-tooltip-bottom:before,
    .leaflet-tooltip-left:before,
    .leaflet-tooltip-right:before {
        border-color: transparent;
    }
    
    .leaflet-tooltip-bottom:before {
        border-bottom-color: var(--ghost-accent-color) !important;
    }
    
    .leaflet-tooltip-top:before {
        border-top-color: var(--ghost-accent-color) !important;
    }
    
    .leaflet-tooltip-left:before {
        border-left-color: var(--ghost-accent-color) !important;
    }
    
    .leaflet-tooltip-right:before {
        border-right-color: var(--ghost-accent-color) !important;
    }

    /* Leaflet popup styling */
    .leaflet-popup-content-wrapper {
        background-color: rgba(21, 23, 26, 0.9)  !important;
        border-left: 4px solid var(--ghost-accent-color)  !important;
        color: #fff  !important;
        font-family: var(--font-sans)  !important;
        border-radius: 4px  !important;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5)  !important;
        backdrop-filter: blur(20px)  !important;
        -webkit-backdrop-filter: blur(20px)  !important;
    }

    .leaflet-popup-content {
        color: #fff !important;
        margin: 12px  !important;
    }

    /* Styling for access message */
    .map-access-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        text-align: center;
        padding: 2rem;
        background: linear-gradient(to bottom right, #3f3f3f, var(--color-darkmode));
        color: #fff;
    }

    .map-access-message h2 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        color: #fff;
    }

    .map-access-message p {
        font-size: 1.2rem;
        margin-bottom: 2rem;
        max-width: 600px;
    }

    .map-access-cta {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .map-signup-button,
    .map-signin-button,
    .map-upgrade-button {
        display: inline-block;
        padding: 0.8rem 1.5rem;
        border-radius: 4px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s ease;
    }

    .map-signup-button,
    .map-upgrade-button {
        background-color: var(--ghost-accent-color);
        color: #fff;
    }

    .map-signin-button {
        background-color: transparent;
        border: 1px solid #fff;
        color: #fff;
    }

    .map-signup-button:hover,
    .map-upgrade-button:hover {
        opacity: 0.9;
        transform: translateY(-2px);
    }

    .map-signin-button:hover {
        background-color: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
    }

    /* Mobile adjustments */
    @media only screen and (max-width: 768px) {
        .map-access-message h2 {
            font-size: 1.8rem;
        }

        .map-access-message p {
            font-size: 1rem;
        }

        .map-access-cta {
            flex-direction: column;
        }
    }

    /* Map data container - hidden by default */
    .map-data-container {
        display: none;
    }
</style>

{{!-- Debug information to check post data structure --}}
<div class="debug-info" style="display: none;">
    Post exists: {{#if post}}Yes{{else}}No{{/if}}<br>
    Visibility: {{post.visibility}}<br>
    Member exists: {{#if member}}Yes{{else}}No{{/if}}<br>
    Member paid: {{#if member.paid}}Yes{{else}}No{{/if}}
</div>

{{#post}}
    {{!-- For public posts, render the map for everyone --}}
    {{#has visibility="public"}}
        <article class="post-full leaflet-map-template">
            <div id="map" style="height: 100vh;"></div>
            <div class="map-data-container">{{content}}</div>
        </article>
    {{else}}
        {{!-- For members-only posts, check if user is a member --}}
        {{#has visibility="members"}}
            {{#if @member}}
                <article class="post-full leaflet-map-template">
                    <div id="map" style="height: 100vh;"></div>
                    <div class="map-data-container">{{content}}</div>
                </article>
            {{else}}
                <div class="map-access-message">
                    <h2>This map is available to members</h2>
                    <p>Sign up or log in to view this map.</p>
                    <div class="map-access-cta">
                        <a href="#/portal/signup" class="map-signup-button">Sign up now</a>
                        <a href="#/portal/signin" class="map-signin-button">Log in</a>
                    </div>
                </div>
            {{/if}}
        {{else}}
            {{!-- For paid-members-only posts, check if user is a paid member --}}
            {{#has visibility="paid"}}
                {{#if @member.paid}}
                    <article class="post-full leaflet-map-template">
                        <div id="map" style="height: 100vh;"></div>
                        <div class="map-data-container">{{content}}</div>
                    </article>
                {{else}}
                    <div class="map-access-message">
                        <h2>This map is available to paid members</h2>
                        <p>Upgrade your membership to view this map.</p>
                        <div class="map-access-cta">
                            {{#if @member}}
                                <a href="#/portal/account/plans" class="map-upgrade-button">Upgrade now</a>
                            {{else}}
                                <a href="#/portal/signup" class="map-signup-button">Sign up now</a>
                                <a href="#/portal/signin" class="map-signin-button">Log in</a>
                            {{/if}}
                        </div>
                    </div>
                {{/if}}
            {{else}}
                {{!-- Default case, just show the map --}}
                <article class="post-full leaflet-map-template">
                    <div id="map" style="height: 100vh;"></div>
                    <div class="map-data-container">{{content}}</div>
                </article>
            {{/has}}
        {{/has}}
    {{/has}}

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="{{asset "js/leaflet-custom-icons.js"}}"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  // Only initialize the map if the map element exists
  // (it won't exist for members/paid content if the user doesn't have access)
  const mapElement = document.getElementById('map');
  if (!mapElement) return;

  const imageUrl = "{{feature_image}}";

  const img = new Image();
  img.onload = function () {
    const w = this.naturalWidth;
    const h = this.naturalHeight;

    // Full image bounds
    const imageBounds = [[0, 0], [h, w]];

    // Create the map
    const map = L.map("map", {
      crs: L.CRS.Simple,
      preferCanvas: true,
      minZoom: -5,
      maxZoom: 2,
      zoomSnap: 0,
      zoomDelta: 0.25,
      maxBounds: imageBounds
    });

    // Add the image
    L.imageOverlay(imageUrl, imageBounds).addTo(map);

    // Get viewport height and calculate scale to fit height
    const viewportHeight = window.innerHeight;
    const scale = viewportHeight / h;
    const zoom = Math.log2(scale);

    // Clamp to allowed zooms
    const clampedZoom = Math.max(map.getMinZoom(), Math.min(map.getMaxZoom(), zoom));

    map.setView([h / 2, w / 2], clampedZoom);
    
    // Process map data from post content
    processMapData(map, h, w);
  };

  img.src = imageUrl;
  
  /**
   * Process map data from post content
   * Looks for JSON data in the post content and adds markers and other overlays to the map
   */
  function processMapData(map, imageHeight, imageWidth) {
    const mapDataContainer = document.querySelector('.map-data-container');
    if (!mapDataContainer) return;
    
    try {
      // Find all pre elements that might contain JSON data
      const preElements = mapDataContainer.querySelectorAll('pre');
      
      preElements.forEach(pre => {
        try {
          // Try to parse the content as JSON
          const content = pre.textContent.trim();
          if (!content.startsWith('{') && !content.startsWith('[')) return;
          
          const mapData = JSON.parse(content);
          
          // Process the map data
          if (mapData) {
            // Process markers
            if (mapData.markers && Array.isArray(mapData.markers)) {
              mapData.markers.forEach(marker => {
                if (marker.position && Array.isArray(marker.position) && marker.position.length === 2) {
                  // Convert coordinates to match the image coordinate system if needed
                  const y = marker.position[0];
                  const x = marker.position[1];
                  
                  let markerOptions = {};
                  
                  // Apply custom icon if specified
                  if (marker.icon) {
                    markerOptions.icon = L.icon(marker.icon);
                  } else if (marker.iconType && window.customIcons && window.customIcons[marker.iconType]) {
                    // Use predefined custom icon if iconType is specified
                    markerOptions.icon = window.customIcons[marker.iconType];
                  }
                  
                  // Create the marker
                  const m = L.marker([y, x], markerOptions).addTo(map);
                  
                  // Add popup if specified
                  if (marker.popup) {
                    m.bindPopup(marker.popup);
                  }
                  
                  // Add tooltip if specified
                  if (marker.tooltip) {
                    m.bindTooltip(marker.tooltip);
                  }
                }
              });
            }
            
            // Process polylines
            if (mapData.polylines && Array.isArray(mapData.polylines)) {
              mapData.polylines.forEach(polyline => {
                if (polyline.points && Array.isArray(polyline.points)) {
                  const options = polyline.options || {};
                  L.polyline(polyline.points, options).addTo(map);
                }
              });
            }
            
            // Process polygons
            if (mapData.polygons && Array.isArray(mapData.polygons)) {
              mapData.polygons.forEach(polygon => {
                if (polygon.points && Array.isArray(polygon.points)) {
                  const options = polygon.options || {};
                  L.polygon(polygon.points, options).addTo(map);
                }
              });
            }
            
            // Process circles
            if (mapData.circles && Array.isArray(mapData.circles)) {
              mapData.circles.forEach(circle => {
                if (circle.center && Array.isArray(circle.center) && circle.center.length === 2 && circle.radius) {
                  const options = circle.options || {};
                  L.circle(circle.center, { radius: circle.radius, ...options }).addTo(map);
                }
              });
            }
            
            // Process rectangles
            if (mapData.rectangles && Array.isArray(mapData.rectangles)) {
              mapData.rectangles.forEach(rectangle => {
                if (rectangle.bounds && Array.isArray(rectangle.bounds) && rectangle.bounds.length === 2) {
                  const options = rectangle.options || {};
                  L.rectangle(rectangle.bounds, options).addTo(map);
                }
              });
            }
            
            // Process custom view settings
            if (mapData.view) {
              if (mapData.view.center && Array.isArray(mapData.view.center) && mapData.view.center.length === 2) {
                const zoom = mapData.view.zoom !== undefined ? mapData.view.zoom : map.getZoom();
                map.setView(mapData.view.center, zoom);
              }
            }
          }
        } catch (e) {
          console.error('Error parsing map data JSON:', e);
        }
      });
    } catch (e) {
      console.error('Error processing map data:', e);
    }
  }
});

// Enable debug info with a query parameter
if (window.location.search.includes('debug=true')) {
  document.querySelector('.debug-info').style.display = 'block';
}
</script>
{{/post}}
